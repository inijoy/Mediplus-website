name: CI - Build and Push Docker Image to Private ECR

on:
  push:
    branches:
      - main

jobs:
  build-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t medplux:${{ github.run_number }} .

      - name: Tag Docker image
        run: |
          docker tag medplux:${{ github.run_number }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/medplux:${{ github.run_number }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/medplux:${{ github.run_number }}


  # deploy:
#   runs-on: ubuntu-latest
#   needs: build-push
#   steps: 
#     - name: Check my SSH key
#       run: |
#         echo "${{ secrets.SSH_KEY }}" > key2.pem
#         chmod 600 key2.pem
#         cat key2.pem

#         # Pull latest Docker image from Public ECR
#         ssh -o StrictHostKeyChecking=no -i key2.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} \
#         "docker pull public.ecr.aws/w7a0s7x9/medplus:${{ github.run_number }}"

#         # Stop and remove old container (optional)
#         ssh -o StrictHostKeyChecking=no -i key2.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} \
#         "docker rm -f medplus || true"

#         # Run new container
#         ssh -o StrictHostKeyChecking=no -i key2.pem ${{ secrets.USERNAME }}@${{ secrets.SERVER_IP }} \
#         "docker run -d --name medplus -p 80:80 public.ecr.aws/w7a0s7x9/medplus:${{ github.run_number }}"

#     - name: Notify Slack of successful deployment
#       if: success()
#       run: |
#         curl -X POST -H 'Content-type: application/json' \
#         --data "{\"text\":\"Deployment successful for *Medplus* (Run #${{ github.run_number }})! ðŸš€\"}" \
#         ${{ secrets.SLACK_WEBHOOK_URL }}

#     - name: Notify Slack if deployment fails
#       if: failure()
#       run: |
#         curl -X POST -H 'Content-type: application/json' \
#         --data "{\"text\":\"Deployment failed for *Medplus* (Run #${{ github.run_number }})! Please check logs.\"}" \
#         ${{ secrets.SLACK_WEBHOOK_URL }}




















      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # -
      #   name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3
      # -
      #   name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      # -
      #   name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     push: true
      #     tags: smartagbawo/mediplus:v3
